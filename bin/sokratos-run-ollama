#!/usr/bin/env bash
# Ollama Developer Operations Script ‚Äî fzf-powered interface for various developer tasks using Ollama models

set -euo pipefail

# Colors
RED='\033[0;31m'; GREEN='\033[0;32m'; BLUE='\033[0;34m'; YELLOW='\033[1;33m'; PURPLE='\033[0;35m'; NC='\033[0m'

# ----------------------------- Utils & deps -----------------------------------

check_dependencies() {
  local missing=()
  for cmd in ollama fzf; do command -v "$cmd" &>/dev/null || missing+=("$cmd"); done
  if (( ${#missing[@]} )); then
    echo -e "${RED}Missing dependencies: ${missing[*]}${NC}"
    echo -e "${YELLOW}Install on Arch:${NC} ${BLUE}sudo pacman -S fzf${NC} (and install ollama via AUR or official method)"
    exit 1
  fi
}

check_ollama() {
  # prefer checking readiness over process name
  if ! ollama list &>/dev/null; then
    echo -e "${YELLOW}Ollama not responding. Attempting to start‚Ä¶${NC}" >&2
    if command -v systemctl &>/dev/null; then
      # try user service, then system, then foreground
      systemctl --user start ollama 2>/dev/null || sudo systemctl start ollama 2>/dev/null || ollama serve & disown
    else
      ollama serve & disown
    fi
    # wait until ready or give up
    for i in {1..10}; do
      sleep 1
      ollama list &>/dev/null && break
      (( i==10 )) && { echo -e "${RED}Could not start/connect to Ollama.${NC}"; exit 1; }
    done
  fi

  local count
  count=$(ollama list 2>/dev/null | awk 'NR>1 && NF{c++} END{print c+0}')
  if [[ "$count" -eq 0 ]]; then
    echo -e "${RED}No models found!${NC}"
    echo -e "${YELLOW}Try pulling one, e.g.:${NC} ${BLUE}ollama pull llama3.1:8b${NC}"
    exit 1
  fi
  echo -e "${GREEN}Found $count model(s) available.${NC}"
}

# Return list of model names on stdout; debug to stderr
get_available_models() {
  local models
  models=$(ollama list 2>/dev/null | awk 'NR>1 {print $1}' | sed '/^$/d' | sort -u) || true
  if [[ -z "${models:-}" ]]; then
    echo -e "${RED}No models found!${NC}" >&2
    echo -e "${YELLOW}Run 'ollama list' to verify.${NC}" >&2
    return 1
  fi
  echo -e "${BLUE}Debug: Found models:${NC}" >&2
  echo "$models" >&2
  echo -e "${BLUE}---${NC}" >&2
  printf '%s\n' "$models"
}

# Validate model name; silent on success
validate_model() {
  local model
  model="$(printf '%s' "${1:-}" | xargs || true)"
  if [[ -z "$model" ]]; then
    echo -e "${RED}Empty model name${NC}" >&2
    return 1
  fi
  if ! ollama show "$model" >/dev/null 2>&1; then
    echo -e "${RED}Model '$model' not found or not accessible${NC}" >&2
    echo -e "${YELLOW}Available models:${NC}" >&2
    ollama list >&2
    return 1
  fi
}

# ----------------------------- UI helpers -------------------------------------

OPERATIONS=(
  "üìù Create README_AGENT.md|create_readme"
  "üîç Review code from file|review_code"
  "üí¨ Chat normally|chat_normal"
  "üìã Text to regex pattern|text_to_regex"
  "üîß Generate suggested file (.agent)|generate_suggestion"
  "‚ùå Exit|exit"
)

show_header() {
  echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
  echo -e "${BLUE}‚ïë                     OLLAMA DEVELOPER OPS                          ‚ïë${NC}"
  echo -e "${BLUE}‚ïë                  Arch Linux ‚Ä¢ Hyprland ‚Ä¢ Kitty                    ‚ïë${NC}"
  echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
  echo
}

select_model() {
  local purpose="${1:-generic}"
  echo -e "${YELLOW}Select model for: ${purpose}${NC}" >&2

  local available
  if ! available="$(get_available_models)"; then
    echo -e "${RED}No models available${NC}" >&2
    return 1
  fi

  echo -e "${BLUE}Available models:${NC}" >&2
  printf '%s\n\n' "$available" >&2

  local selected
  selected="$(printf '%s\n' "$available" | fzf \
    --height=40% --border \
    --prompt='Model > ' \
    --preview="echo 'Model: {}'; ollama show {} 2>/dev/null | head -20 || echo 'No info for: {}'")" || true

  if [[ -z "${selected:-}" ]]; then
    echo -e "${YELLOW}No model selected${NC}" >&2
    return 1
  fi

  if validate_model "$selected" >/dev/null; then
    printf '%s\n' "$selected"
  else
    return 1
  fi
}

test_model() {
  local model="$1"
  echo -e "${YELLOW}Testing connectivity with model: ${model}${NC}"
  if printf 'test' | ollama run "$model" >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Model ${model} is responsive${NC}"
    return 0
  else
    echo -e "${RED}‚ùå Could not run model:%s${NC}" "$(printf ' %q' "$model")"
    return 1
  fi
}

# ------------------------------ Operations ------------------------------------

create_readme() {
  echo -e "${GREEN}Creating README_AGENT.md...${NC}"

  local model
  model="$(select_model 'README generation')" || { echo -e "${RED}Model selection failed${NC}"; return 1; }
  test_model "$model" || return 1

  local project_dir project_name
  project_dir="$(pwd)"; project_name="$(basename "$project_dir")"

  echo -e "${BLUE}Analyzing project structure for: ${project_name}${NC}"

  local file_list
  file_list="$(find . -maxdepth 2 -type f \
    \( -name '*.py' -o -name '*.js' -o -name '*.ts' -o -name '*.go' -o -name '*.rs' \
     -o -name '*.java' -o -name '*.cpp' -o -name '*.c' -o -name '*.sh' -o -name '*.md' \
     -o -name '*.json' -o -name '*.yaml' -o -name '*.yml' -o -name 'Dockerfile' -o -name 'Makefile' \) | head -20)"

  local prompt
  read -r -d '' prompt <<EOF || true
You are an expert technical writer. Create a comprehensive README_AGENT.md for the project '${project_name}' based on the following:

Project Directory: ${project_dir}
Files found:
${file_list}

Create a README_AGENT.md that includes:
1. Project title and brief description
2. Installation instructions
3. Usage examples
4. API documentation (if applicable)
5. Contributing guidelines
6. License information
7. Architecture overview
8. Development setup

Format it in proper Markdown with clear sections, code blocks, and professional structure.
EOF

  echo -e "${PURPLE}Generating README with ${model}...${NC}"
  if printf '%s\n' "$prompt" | ollama run "$model" > README_AGENT.md; then
    echo -e "${GREEN}‚úÖ README_AGENT.md created successfully!${NC}"
    echo -e "${YELLOW}Preview:${NC}"; head -20 README_AGENT.md || true
  else
    echo -e "${RED}‚ùå Failed to generate README${NC}"
    return 1
  fi
}

review_code() {
  echo -e "${GREEN}Code Review Assistant${NC}"
  local file
  file="$(find . -type f \( -name '*.py' -o -name '*.js' -o -name '*.ts' -o -name '*.go' -o -name '*.rs' -o -name '*.java' -o -name '*.cpp' -o -name '*.c' -o -name '*.sh' \) \
    | fzf --height=40% --border --prompt='Select file to review > ' \
          --preview='bat --color=always --style=numbers {} 2>/dev/null || head -40 {}')" || true
  [[ -n "${file:-}" ]] || { echo -e "${YELLOW}No file selected${NC}"; return 1; }

  local model
  model="$(select_model 'code review')" || { echo -e "${RED}Model selection failed${NC}"; return 1; }
  test_model "$model" || return 1

  echo -e "${BLUE}Reviewing: ${file} with model: ${model}${NC}"

  local code_content file_extension prompt
  code_content="$(cat "$file")"; file_extension="${file##*.}"
  read -r -d '' prompt <<EOF || true
You are a senior software engineer conducting a thorough code review. Review the following ${file_extension} code and provide:

1. Quality: overall score (1‚Äì10) with reasoning
2. Security: potential vulnerabilities
3. Performance: bottlenecks/inefficiencies
4. Best Practices: language-specific conventions/patterns
5. Maintainability: readability, documentation, structure
6. Bugs/Logic: potential runtime or logical issues
7. Recommendations: actionable fixes with code examples
8. Positives: what is done well

File: ${file}

\`\`\`${file_extension}
${code_content}
\`\`\`
EOF

  echo -e "${PURPLE}Analyzing code with ${model}...${NC}"
  if printf '%s\n' "$prompt" | ollama run "$model" | tee "${file}.review" >/dev/null; then
    echo -e "${GREEN}‚úÖ Code review saved to ${file}.review${NC}"
  else
    echo -e "${RED}‚ùå Code review failed${NC}"
    return 1
  fi
}

chat_normal() {
  echo -e "${GREEN}Normal Chat Mode${NC}"
  local model
  model="$(select_model 'general chat')" || { echo -e "${RED}Model selection failed${NC}"; return 1; }
  test_model "$model" || return 1

  echo -e "${BLUE}Starting chat with ${model}${NC}"
  echo -e "${YELLOW}Type 'exit' to return to main menu${NC}\n"

  while true; do
    printf "${GREEN}You: ${NC}"; IFS= read -r user_input || break
    [[ "$user_input" == "exit" ]] && break
    echo -e "${PURPLE}${model}:${NC}"
    if ! printf '%s\n' "$user_input" | ollama run "$model"; then
      echo -e "${RED}‚ùå Failed to get response from ${model}${NC}"
    fi
    echo
  done
}

text_to_regex() {
  echo -e "${GREEN}Text to Regex Pattern Generator${NC}"

  local file
  file="$(find . -type f \( -name '*.txt' -o -name '*.md' -o -name '*.log' -o -name '*.py' -o -name '*.js' -o -name '*.json' -o -name '*.csv' \) \
    | fzf --height=40% --border --prompt='Select file to analyze > ' --preview='head -60 {}')" || true
  [[ -n "${file:-}" ]] || { echo -e "${YELLOW}No file selected${NC}"; return 1; }

  local model
  model="$(select_model 'regex generation')" || { echo -e "${RED}Model selection failed${NC}"; return 1; }
  test_model "$model" || return 1

  echo -e "${YELLOW}What patterns do you want to extract from ${file}? (e.g., emails, URLs, dates)${NC}"
  printf "${GREEN}Pattern description: ${NC}"; IFS= read -r desc || return 1

  local sample prompt
  sample="$(head -100 "$file")"
  read -r -d '' prompt <<EOF || true
You are a regex expert. Based on the sample below, create regex pattern(s) to match: ${desc}

File: ${file}
Sample:
\`\`\`
${sample}
\`\`\`

Return:
1) Regex pattern(s)
2) Explanation for each
3) Example matches from the sample
4) Usage in Python/JavaScript/grep
5) Edge cases & limitations
EOF

  echo -e "${PURPLE}Generating regex with ${model}...${NC}"
  if printf '%s\n' "$prompt" | ollama run "$model" | tee "${file}.regex_patterns" >/dev/null; then
    echo -e "${GREEN}‚úÖ Saved to ${file}.regex_patterns${NC}"
  else
    echo -e "${RED}‚ùå Regex generation failed${NC}"
    return 1
  fi
}

generate_suggestion() {
  echo -e "${GREEN}Generate Suggested File (.agent)${NC}"

  local file
  file="$(find . -type f \( -name '*.py' -o -name '*.js' -o -name '*.ts' -o -name '*.go' -o -name '*.rs' -o -name '*.java' -o -name '*.cpp' -o -name '*.c' -o -name '*.sh' -o -name '*.md' -o -name '*.json' -o -name '*.yaml' -o -name '*.yml' \) \
    | fzf --height=40% --border --prompt='Select file to improve > ' \
          --preview='bat --color=always --style=numbers {} 2>/dev/null || head -60 {}')" || true
  [[ -n "${file:-}" ]] || { echo -e "${YELLOW}No file selected${NC}"; return 1; }

  local model
  model="$(select_model 'code improvement')" || { echo -e "${RED}Model selection failed${NC}"; return 1; }
  test_model "$model" || return 1

  echo -e "${YELLOW}Pick improvement type${NC}"
  local improvement_options=(
    "üöÄ Performance optimization"
    "üîí Security improvements"
    "üßπ Code refactoring and cleanup"
    "üìö Add documentation and comments"
    "üß™ Add error handling and validation"
    "‚ú® Add new features or functionality"
    "üéØ Convert to different language/framework"
  )
  local improvement_type
  improvement_type="$(printf '%s\n' "${improvement_options[@]}" | fzf --height=40% --border --prompt='Improvement type > ')" || true
  [[ -n "${improvement_type:-}" ]] || { echo -e "${YELLOW}No improvement type selected${NC}"; return 1; }

  local code file_ext prompt suggested_file
  code="$(cat "$file")"; file_ext="${file##*.}"; suggested_file="${file}.agent"
  read -r -d '' prompt <<EOF || true
You are an expert software engineer. Improve the following code focusing on: ${improvement_type}

Original file: ${file}

\`\`\`${file_ext}
${code}
\`\`\`

Please provide ONLY the improved code. Requirements:
- Maintain original functionality
- Follow best practices and modern conventions
- Include clear comments explaining changes
- Production-ready and well-tested
EOF

  echo -e "${PURPLE}Generating improved version with ${model}...${NC}"
  if printf '%s\n' "$prompt" | ollama run "$model" > "$suggested_file"; then
    echo -e "${GREEN}‚úÖ Saved to ${suggested_file}${NC}"
    if command -v diff &>/dev/null; then
      echo -e "${YELLOW}Changes preview (first 20 lines):${NC}"
      diff -u "$file" "$suggested_file" | head -20 || true
    fi
  else
    echo -e "${RED}‚ùå Suggestion generation failed${NC}"
    return 1
  fi
}

# ------------------------------- Main menu ------------------------------------

main_menu() {
  while true; do
    show_header
    local selected_operation
    selected_operation="$(printf '%s\n' "${OPERATIONS[@]}" | fzf \
      --height=50% --border \
      --prompt='Select operation > ' \
      --header='Use ‚Üë‚Üì to navigate, Enter to select, ESC to exit' \
      --preview="echo 'Available models:'; ollama list 2>/dev/null | awk 'NR>1{print \$1}' | sed '/^$/d' | nl || echo 'No models found'")" || true

    local op_func="${selected_operation##*|}"

    case "$op_func" in
      create_readme)        create_readme ;;
      review_code)          review_code ;;
      chat_normal)          chat_normal ;;
      text_to_regex)        text_to_regex ;;
      generate_suggestion)  generate_suggestion ;;
      exit) echo -e "${GREEN}Thanks for using Ollama Developer Ops! üöÄ${NC}"; exit 0 ;;
      *)   echo -e "${RED}Unknown operation${NC}" ;;
    esac

    echo; echo -e "${YELLOW}Press Enter to return to main menu...${NC}"; read -r || true
  done
}

# --------------------------------- Entry --------------------------------------

main() {
  check_dependencies
  check_ollama
  main_menu
}
main "$@"
